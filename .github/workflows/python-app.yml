# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  create:
  pull_request:

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: echo "event name is:" ${{ github.event_name }}
    - run: echo "event type is:" ${{ github.event.action }}
    - run: echo "ref type is:" ${{ github.ref_type }}
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Testing Exit Codes
      run: python tests/flippable.py True
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Build
      run: |
        python setup.py bdist_egg
    - uses: actions/upload-artifact@v3
      with:
        name: my-artifact
        path: ./dist/*.egg
    - name: Extract Github Context
      run: |
        echo $GITHUB_REF_TYPE
        echo $GITHUB_EVENT_ACTION
        echo $GITHUB_EVENT_NAME
        echo $GITHUB_REF_NAME
        echo $GITHUB_REF

  runIntegrationTests:
    name: Test on Integration Tests
    needs: [build]
    runs-on: ubuntu-latest
    environment: 
      name: Integration
    steps:
    - name: Install dependencies
      run: |
        echo "I'm testing!"
    - name: Check Complex Secrets
      env:
        SUPER_SECRET: ${{ secrets.ComplexSecret.child }}
      run: |
        if [[ $SUPER_SECRET == 456 ]]
        then
          echo "Matches to 456!"
        else
          echo "Did not match"
          python3 -c 'import os;import json; print(json.loads(os.environ.get("SUPER_SECRET")))'
        fi

  createRelease:
    name: Create Release
    if: ${{ github.event_name == 'create' && github.ref_type == 'tag' }}
    needs: [runIntegrationTests]
    runs-on: ubuntu-latest
    environment: 
      name: Production
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        echo "I'm creating a release"
        echo "This is something!"
    - name: Check Complex Secrets
      env:
        SUPER_SECRET: ${{ secrets.ComplexSecret.child.inner }}
      run: |
        if [[ $SUPER_SECRET == 777 ]]
        then
          echo "Matches to 777!"
        else
          echo $SUPER_SECRET
        fi
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: my-artifact
        path: ~/download
    - run: |
        ls ~/download
    - name: Create Release
      uses: ncipollo/release-action@v1
      if: github.ref_type == 'tag'
      with:
        artifacts: ~/download/*.egg
        bodyFile: "./notes/body.md"
        token: ${{ secrets.PAT_FOR_RELEASE }}
      
